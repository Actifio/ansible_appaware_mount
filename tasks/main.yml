---

# Check whether same SID is already configured, if we're running
# on the ansible inventory item.
- name: check if oracle has already been installed
  block:
    - command: grep -q "^{{ ora_db_name }}:" /etc/oratab
      ignore_errors: yes
      register: oracle_installed
    - fail:
        msg: "instance already configured with the same SID"
      when: oracle_installed.rc == 0
  when: act_dest_host == ansible_hostname

# Pre-FLight check for variable consistency
- fail:
    msg: the variable "{{ item.name }}" should be defined.
  when: item.value == ''
  with_items:
    - { name: "act_src_host", value: act_src_host }
    - { name: "act_appname", value: act_appname }
    - { name: "act_vendorkey", value: act_vendorkey }
    - { name: "act_appliance", value: act_appliance }
    - { name: "act_user", value: act_user }
    - { name: "act_pass", value: act_pass }

# Generate a login token using the username, password and vendorkey
- name: check the existing session id is ok
  uri: 
    url: "{{ act_api_info }}/lsversion?sessionid={{ act_sessionid }}"
    validate_certs: no
  register: session_ok
  when: act_sessionid is defined

- name: geenrate auth token is not fact set or session has expired
  block:
    - name: generating authentication token 
      uri:
        url: "{{ act_api_login }}"
        validate_certs: no  
      register: logintoken
      
    - name: sessionid is a fact
      set_fact: 
        act_sessionid: "{{ logintoken.json.sessionid }}"
      cacheable: yes
  when: act_sessionid is not defined or session_ok.status != 200

# Filte out the applicationid based on the application_name and source_host
- name: get the application id
  uri:
    url: "{{ act_api_info }}/lsapplication?sessionid={{ act_sessionid }}&filtervalue={{ 'appname=' | urlencode }}{{ act_appname }}{{ '&hostname=' | urlencode }}{{ act_src_host  }}{{ '&apptype!=VMBackup' | urlencode }} "
    validate_certs: no
    method: GET
  register: lsapplication   

# Extract the appclass of the application. Using this in mountimage
- name: saving application class
  set_fact: 
    appclass: "{{ lsapplication.json.result[0].appclass }}"

# try to ascertain the destination host ID
- name: search for host_id from name
  block: 
    - uri:
        url: "{{ act_api_info }}/lshost?sessionid={{ act_sessionid }}&filtervalue=hostname={{ act_dest_host }}"
        validate_certs: no
      register: hostid
    
    - set_fact:
        host_id: "{{ hostid.json.result.0.id }}"
      when: hostid is defined

# Should this fail, we will assume that the ansible_host is specified and 
# try to filterout the host_ids using the IP addresses.
- name: search for the host_id from the IP addresses
  block:
    - name: query for the hostID from IP
      uri: 
        url: "{{ act_api_info }}/lshost?filtervalue=ipaddress={{ item }}&sessionid={{ act_sessionid }}"
        validate_certs: no
      register: hostid
      with_items:
        - ansible_all_ipv4_addresses
    
    - set_fact:
        host_id: "{{ hostid.json.result.0.id }}"
  when: hostid is not defined

# Fail if the host could not be found
- name: fail when the target host cannot be found
  fail:
    msg: "Unable to find a hostID with a matching description" 
  when: host_id == ''

- block:
# Filter all the available backups if the jobclass is not specified
    - block: 
        - name: get the image list select the image from (for all the job_classes)
          uri: 
            url: "{{ act_api_info }}/lsbackup?filtervalue={{ 'appid=' | urlencode }}{{ lsapplication.json.result[0].id }}&sessionid={{ act_sessionid }}"
            validate_certs: no
          register: lsbackup
        - set_fact:
            image_list: "{{ lsbackup }}"
      when: act_job_class == ''

    # Filter all the backup images if the jobclass is specified.
    - block:
        - name: get the image list select the image from (for {{ act_job_class }} job_class)
          uri: 
            url: "{{ act_api_info }}/lsbackup?filtervalue={{ 'appid=' | urlencode }}{{ lsapplication.json.result[0].id }}{{ '&jobclass=' | urlencode }}{{ act_job_class | urlencode }}{{ '&consistencydate<' | urlencode }}{{ act_restoretime | urlencode }}&sessionid={{ act_sessionid }}"
            validate_certs: no
          register: lsbackup
        - set_fact:
            image_list: "{{ lsbackup }}"
      when: act_job_class != ''

    # Selecting the image to mount based on the restoretime and strict_poliocy
    - name: selecting an image to mount
      uri:
        url: "{{ act_api_info }}/lsbackup?argument={{ item.backupname }}&sessionid={{ act_sessionid }}"
        validate_certs: no
      register: image 
      with_items: 
        - "{{ image_list.json.result }}"

    - name: save the image name to facts
      set_fact: 
        image_name: "image={{ image | get_image_name (act_restoretime, strict_policy) }}&" # Custom filter plugin
      when: image is defined
    
    - name: fail when image is not found
      fail:
        msg: "Unable to find a viable image. If you're using stric_policy=yes, try not so strict"
      when: image_name == ''
  when: act_imagename == '' and act_restoretime != 'latest'

# when the latest image is selected, don't looks for the image and use the appid
- name: set the image name when recovering to the latest time
  set_fact:
      image_name: "appid={{ lsapplication.json.result[0].id }}&"
  when: act_restoretime == 'latest'

# Cature the capabilities of this version.
- name: capturing the capcbilities from the actifio appliance
  uri:
    url: "{{ act_api_info }}/lsappclass?name={{ appclass }}&sessionid={{ act_sessionid }}"
    validate_certs: no
  register: capabilities

- name: non-blocking mount operations
  set_fact: 
    block_mode: "&nowait"
  when: act_nowait_mount == true

- name: blocking mount operations
  set_fact: 
    block_mode: ""
  when: act_nowait_mount != true

- name: set recovery time 
  set_fact:
    recovery_time: "&recoverytime={{ act_restoretime | urlencode }}"
  when: act_restoretime != "latest" and strict_policy == true

- name: unset recovery time  
  set_fact:
    recovery_time: ""
  when: act_restoretime == "latest" or strict_policy == false

# Compose the script data
- name: initiate the script data structures
  set_fact:
    script_string: "{{ [] }}"

- name: compose the pre_script string
  set_fact:
    script_string: "{{ script_string }} + [ 'name={{ act_pre_script }}:phase=PRE' ]"
  when: act_pre_script != ''

- name: compose the post_script string
  set_fact:
    script_string: "{{ script_string }} + [ 'name={{ act_post_script }}:phase=POST' ]"
  when: act_post_script != ''

- name: compose the script string
  set_fact:
    script_cmd: "&script={{ script_string | join(';') | urlencode }}"
  when: act_pre_script != '' or act_post_script != ''

# Trigger appawre mount
- name: Oracle appaware mount 
  uri:
    url: "{{ act_api_task}}/mountimage?{{ image_name }}&host={{ host_id }}{{ block_mode }}&label={{ act_imagelabel }}&sessionid={{ act_sessionid }}{{ script_cmd }}{{ recovery_time }}&restoreoption={{ 'provisioningoptions=' | urlencode }}{{ provisioning_options_ora | gen_prov_options (capabilities.json.result) | urlencode }}"
    method: POST
    validate_certs: no
    timeout: 1200
  async: 0
  when: appclass == "Oracle" 
  
- name: SQL Server appaware mount 
  uri:
    url: "{{ act_api_task}}/mountimage?{{ image_name }}&host={{ host_id }}{{ block_mode }}&label={{ act_imagelabel }}&sessionid={{ act_sessionid }}{{ script_cmd }}{{ recovery_time }}&restoreoption={{ 'provisioningoptions=' | urlencode }}{{ provisioning_options_sql | gen_prov_options (capabilities.json.result) | urlencode }}"
    method: POST
    validate_certs: no
    timeout: 1200
  async: 0
  when: appclass == "SQLServer" 

- name: SQL Server Group appaware mount 
  uri:
    url: "{{ act_api_task}}/mountimage?{{ image_name }}&host={{ host_id }}{{ block_mode }}&label={{ act_imagelabel }}&sessionid={{ act_sessionid }}&parts={{ sql_source_dbnames | urlencode }}{{ script_cmd }}{{ recovery_time }}&restoreoption={{ 'provisioningoptions=' | urlencode }}{{ provisioning_options_sql | gen_prov_options_sqlg (capabilities.json.result, sql_source_dbnames) | urlencode }}"
    method: POST
    validate_certs: no
    timeout: 1200
  async: 0
  when: appclass == "SQLServerGroup" 
